<div class="container">
  <%= simple_form_for(@event, html: { data: { event_id: @event.id.presence } }) do |f| %>
    <%= f.error_notification %>
    <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

    <div class="form-inputs">
      <%= f.input :name, input_html: { class: 'form-control' } %>
      <%= f.association :group, collection: current_user.groups_they_lead, input_html: { class: 'form-control' }, id: 'event_group_id' %>
      <%= f.input :starts_at, input_html: { class: 'form-control' }, id: 'event_starts_at' %>
      <%= f.input :address, input_html: { class: 'form-control' } %>
      <%= f.input :notes, input_html: { class: 'form-control' } %>
      <%= f.input :ends_at, input_html: { class: 'form-control' }, id: 'event_ends_at' %>
    </div>

    <div class="row mt-3">
      <div class="btn btn-outline-secondary btn-block">
        <div class="form-actions">
          <%= f.button :submit %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<%= content_for :javascript do %>
<script>
document.addEventListener('turbo:load', function() {
  const form = document.querySelector('form[data-event-id]') || document.querySelector('form');
  if (!form) {
    console.error('Form not found');
    return;
  }
  const eventId = form.dataset.eventId || null; // eventId is null when an event is being created
  const groupField = document.getElementById('event_group_id');
  const startYearField = document.getElementById('event_starts_at_1i');
  const startMonthField = document.getElementById('event_starts_at_2i');
  const startDayField = document.getElementById('event_starts_at_3i');
  const startHourField = document.getElementById('event_starts_at_4i');
  const startMinuteField = document.getElementById('event_starts_at_5i');
  const endYearField = document.getElementById('event_ends_at_1i');
  const endMonthField = document.getElementById('event_ends_at_2i');
  const endDayField = document.getElementById('event_ends_at_3i');
  const endHourField = document.getElementById('event_ends_at_4i');
  const endMinuteField = document.getElementById('event_ends_at_5i');

  function getDatetime(yearField, monthField, dayField, hourField, minuteField) {
    return new Date(
      yearField.value,
      monthField.value - 1,
      dayField.value,
      hourField.value,
      minuteField.value
    );
  }

  function checkConflicts() {
    const groupId = groupField.value;
    const startTime = getDatetime(startYearField, startMonthField, startDayField, startHourField, startMinuteField);
    const endTime = getDatetime(endYearField, endMonthField, endDayField, endHourField, endMinuteField);

    if (groupId && !isNaN(startTime) && !isNaN(endTime)) {
      let url = `/events/check_conflicts?group_id=${groupId}&starts_at=${startTime.toISOString()}&ends_at=${endTime.toISOString()}`;
      if (eventId) {
        url += `&event_id=${eventId}`;
      }

      fetch(url, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.conflict_count > 0) {
          alert(`${data.conflict_count} group members have conflicts with this time frame.`);
        } else {
          alert('No time conflicts detected among any group members.');
        }
      })
      .catch(error => console.error('Error:', error));
    }
  }

  const startFields = [startYearField, startMonthField, startDayField, startHourField, startMinuteField];
  const endFields = [endYearField, endMonthField, endDayField, endHourField, endMinuteField];

  startFields.forEach(field => field.addEventListener('change', checkConflicts));
  endFields.forEach(field => field.addEventListener('change', checkConflicts));
  groupField.addEventListener('change', checkConflicts);
});
</script>
<% end %>
